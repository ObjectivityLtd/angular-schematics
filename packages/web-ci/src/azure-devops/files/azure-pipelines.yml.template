name: <%= capitalize(project) %> Angular App $(BuildID)

trigger:
- '*'
-  '*/*'

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: Npm@1
  displayName: 'Install dependencies'
  inputs:
    command: custom
    workingDir: '<%= workingDir %>'
    verbose: false
    customCommand: ci

- task: Npm@1
  displayName: 'Build'
  inputs:
    command: custom
    workingDir: '<%= workingDir %>'
    verbose: false
    customCommand: 'run ng build <%= project %> -- --prod --aot -vc -cc --buildOptimizer --progress=false'

- task: Npm@1
  displayName: 'Run Unit Tests'
  inputs:
    command: custom
    workingDir: '<%= workingDir %>'
    customCommand: 'run ng test <%= project %> -- --karma-config=<%= karmaConfigPath %> --code-coverage --no-progress --source-map=false'
    verbose: false
  continueOnError: true

- task: Bash@3
  displayName: 'Run E2E Tests'
  inputs:
    targetType: 'inline'
    script: |
      npm run install-puppeteer
      npm run ng e2e <%= project %> -- --protractor-config=<%= protractorConfigPath %>
    workingDirectory: '<%= workingDir %>'
  continueOnError: true

- task: PublishTestResults@2
  displayName: 'Publish Tests Results'
  inputs:
    testResultsFormat: JUnit
    testResultsFiles: '$(Build.SourcesDirectory)/junit/**/*.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/coverage/<%= project %>/cobertura-coverage.xml'

- task: Npm@1
  displayName: 'Run Code Analysis'
  inputs:
    command: custom
    workingDir: '<%= workingDir %>' 
    verbose: false
    customCommand: 'run ng lint <%= project %>'
  continueOnError: true

- task: ArchiveFiles@2
  displayName: 'Archive'
  inputs:
    rootFolderOrFile: '<%= workingDir %>/dist/<%= project %>'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/<%= project %>.zip'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.ArtifactStagingDirectory)'
    ArtifactName: '<%= project %>'